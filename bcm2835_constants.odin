package bcm2835;

HIGH :: 0x1
LOW :: 0x0

CORE_CLK_HZ :: 250000000
BMC2835_RPI2_DT_FILENAME :: "/proc/device-tree/soc/ranges"

PERI_BASE :: 0x20000000
PERI_SIZE :: 0x01000000

RPI2_PERI_BASE :: 0x3F000000
RPI4_PERI_BASE :: 0xFE000000
RPI4_PERI_SIZE :: 0x01800000

ST_BASE :: 0x3000
GPIO_PADS :: 0x100000
CLOCK_BASE :: 0x101000
GPIO_BASE :: 0x200000
SPI0_BASE :: 0x204000
BSC0_BASE :: 0x205000
GPIO_PWM :: 0x20C000
AUX_BASE :: 0x215000
SPI1_BASE :: 0x215080
SPI2_BASE :: 0x2150C0
BSC1_BASE :: 0x804000
SMI_BASE :: 0x600000

PAGE_SIZE  :: (4*1024)
BLOCK_SIZE :: (4*1024)

GPFSEL0 :: 0x0000
GPFSEL1 :: 0x0004
GPFSEL2 :: 0x0008
GPFSEL3 :: 0x000c
GPFSEL4 :: 0x0010
GPFSEL5 :: 0x0014
GPSET0 :: 0x001c
GPSET1 :: 0x0020
GPCLR0 :: 0x0028
GPCLR1 :: 0x002c
GPLEV0 :: 0x0034
GPLEV1 :: 0x0038
GPEDS0 :: 0x0040
GPEDS1 :: 0x0044
GPREN0 :: 0x004c
GPREN1 :: 0x0050
GPFEN0 :: 0x0058
GPFEN1 :: 0x005c
GPHEN0 :: 0x0064
GPHEN1 :: 0x0068
GPLEN0 :: 0x0070
GPLEN1 :: 0x0074
GPAREN0 :: 0x007c
GPAREN1 :: 0x0080
GPAFEN0 :: 0x0088
GPAFEN1 :: 0x008c
GPPUD :: 0x0094
GPPUDCLK0 :: 0x0098
GPPUDCLK1 :: 0x009c


GPPUPPDN0 :: 0x00e4 /* Pin pull-up/down for pins 15:0 */
GPPUPPDN1 :: 0x00e8 /* Pin pull-up/down for pins 31:16 */
GPPUPPDN2 :: 0x00ec /* Pin pull-up/down for pins 47:32 */
GPPUPPDN3 :: 0x00f0 /* Pin pull-up/down for pins 57:48 */

GPIO_PUD_ERROR :: 0x08
PADS_GPIO_0_27 :: 0x002c
PADS_GPIO_28_45 :: 0x0030
PADS_GPIO_46_53 :: 0x0034

PAD_PASSWRD :: (0x5A << 24)
PAD_SLEW_RATE_UNLIMITED :: 0x10
PAD_HYSTERESIS_ENABLED :: 0x08
PAD_DRIVE_2mA :: 0x00
PAD_DRIVE_4mA :: 0x01
PAD_DRIVE_6mA :: 0x02
PAD_DRIVE_8mA :: 0x03
PAD_DRIVE_10mA :: 0x04
PAD_DRIVE_12mA :: 0x05
PAD_DRIVE_14mA :: 0x06
PAD_DRIVE_16mA :: 0x07

AUX_IRQ :: 0x0000
AUX_ENABLE :: 0x0004
AUX_ENABLE_UART1 :: 0x01
AUX_ENABLE_SPI0 :: 0x02
AUX_ENABLE_SPI1 :: 0x04


AUX_SPI_CNTL0 :: 0x0000
AUX_SPI_CNTL1 :: 0x0004
AUX_SPI_STAT :: 0x0008
AUX_SPI_PEEK :: 0x000C
AUX_SPI_IO :: 0x0020
AUX_SPI_TXHOLD :: 0x0030
AUX_SPI_CLOCK_MIN :: 30500
AUX_SPI_CLOCK_MAX ::  125000000
AUX_SPI_CNTL0_SPEED :: 0xFFF00000
AUX_SPI_CNTL0_SPEED_MAX :: 0xFFF
AUX_SPI_CNTL0_SPEED_SHIFT ::  20
AUX_SPI_CNTL0_CS0_N :: 0x000C0000
AUX_SPI_CNTL0_CS1_N :: 0x000A0000
AUX_SPI_CNTL0_CS2_N :: 0x00060000
AUX_SPI_CNTL0_POSTINPUT :: 0x00010000
AUX_SPI_CNTL0_VAR_CS :: 0x00008000
AUX_SPI_CNTL0_VAR_WIDTH :: 0x00004000
AUX_SPI_CNTL0_DOUTHOLD :: 0x00003000
AUX_SPI_CNTL0_ENABLE :: 0x00000800
AUX_SPI_CNTL0_CPHA_IN :: 0x00000400
AUX_SPI_CNTL0_CLEARFIFO :: 0x00000200
AUX_SPI_CNTL0_CPHA_OUT :: 0x00000100
AUX_SPI_CNTL0_CPOL :: 0x00000080
AUX_SPI_CNTL0_MSBF_OUT :: 0x00000040
AUX_SPI_CNTL0_SHIFTLEN :: 0x0000003F
AUX_SPI_CNTL1_CSHIGH :: 0x00000700
AUX_SPI_CNTL1_IDLE :: 0x00000080
AUX_SPI_CNTL1_TXEMPTY :: 0x00000040
AUX_SPI_CNTL1_MSBF_IN :: 0x00000002
AUX_SPI_CNTL1_KEEP_IN :: 0x00000001
AUX_SPI_STAT_TX_LVL :: 0xF0000000
AUX_SPI_STAT_RX_LVL :: 0x00F00000
AUX_SPI_STAT_TX_FULL :: 0x00000400
AUX_SPI_STAT_TX_EMPTY :: 0x00000200
AUX_SPI_STAT_RX_FULL :: 0x00000100
AUX_SPI_STAT_RX_EMPTY :: 0x00000080
AUX_SPI_STAT_BUSY :: 0x00000040
AUX_SPI_STAT_BITCOUNT :: 0x0000003F


SPI0_CS :: 0x0000
SPI0_FIFO :: 0x0004
SPI0_CLK :: 0x0008
SPI0_DLEN :: 0x000c
SPI0_LTOH :: 0x0010
SPI0_DC :: 0x0014
SPI0_CS_LEN_LONG :: 0x02000000
SPI0_CS_DMA_LEN :: 0x01000000
SPI0_CS_CSPOL2 :: 0x00800000
SPI0_CS_CSPOL1 :: 0x00400000
SPI0_CS_CSPOL0 :: 0x00200000
SPI0_CS_RXF :: 0x00100000
SPI0_CS_RXR :: 0x00080000
SPI0_CS_TXD :: 0x00040000
SPI0_CS_RXD :: 0x00020000
SPI0_CS_DONE :: 0x00010000
SPI0_CS_TE_EN :: 0x00008000
SPI0_CS_LMONO :: 0x00004000
SPI0_CS_LEN :: 0x00002000
SPI0_CS_REN :: 0x00001000
SPI0_CS_ADCS :: 0x00000800
SPI0_CS_INTR :: 0x00000400
SPI0_CS_INTD :: 0x00000200
SPI0_CS_DMAEN :: 0x00000100
SPI0_CS_TA :: 0x00000080
SPI0_CS_CSPOL :: 0x00000040
SPI0_CS_CLEAR :: 0x00000030
SPI0_CS_CLEAR_RX :: 0x00000020
SPI0_CS_CLEAR_TX :: 0x00000010
SPI0_CS_CPOL :: 0x00000008
SPI0_CS_CPHA :: 0x00000004
SPI0_CS_CS :: 0x00000003


BSC_C :: 0x0000
BSC_S :: 0x0004
BSC_DLEN :: 0x0008
BSC_A :: 0x000c
BSC_FIFO :: 0x0010
BSC_DIV :: 0x0014
BSC_DEL :: 0x0018
BSC_CLKT :: 0x001c
BSC_C_I2CEN :: 0x00008000
BSC_C_INTR :: 0x00000400
BSC_C_INTT :: 0x00000200
BSC_C_INTD :: 0x00000100
BSC_C_ST :: 0x00000080
BSC_C_CLEAR_1 :: 0x00000020
BSC_C_CLEAR_2 :: 0x00000010
BSC_C_READ :: 0x00000001
BSC_S_CLKT :: 0x00000200
BSC_S_ERR :: 0x00000100
BSC_S_RXF :: 0x00000080
BSC_S_TXE :: 0x00000040
BSC_S_RXD :: 0x00000020
BSC_S_TXD :: 0x00000010
BSC_S_RXR :: 0x00000008
BSC_S_TXW :: 0x00000004
BSC_S_DONE :: 0x00000002
BSC_S_TA :: 0x00000001
BSC_FIFO_SIZE :: 16


SMI_CS :: 0 /*! < Control and status register > */
SMI_LENGTH :: 1 /*! < Transfer length register > */
SMI_ADRS :: 2 /*! < Transfer address register > */
SMI_DATA :: 3 /*! < Transfer data register > */
SMI_READ0 :: 4 /*! < Read settings 0 register > */
SMI_WRITE0 :: 5 /*! < Write settings 0 register > */
SMI_READ1 :: 6 /*! < Read settings 1 register > */
SMI_WRITE1 :: 7 /*! < Write settings 1 register > */
SMI_READ2 :: 8 /*! < Read settings 2 register > */
SMI_WRITE2 :: 9 /*! < Write settings 2 register > */
SMI_READ3 :: 10 /*! < Read settings 3 register > */
SMI_WRITE3 :: 11 /*! < Write settings 3 register > */
SMI_DMAC :: 12 /*! < DMA control register > */
SMI_DIRCS :: 13 /*! < Direct control register > */
SMI_DIRADDR :: 14 /*! < Direct access address register > */
SMI_DIRDATA :: 15 /*! < Direct access data register > */
SMI_RW_WIDTH_MSK :: 0xC0000000 /*! < Data width mask > */
SMI_RW_WID8 :: 0x00000000 /*! < Data width 8 bits > */
SMI_RW_WID16 :: 0x40000000 /*! < Data width 16 bits > */
SMI_RW_WID18 :: 0x80000000 /*! < Data width 18 bits > */
SMI_RW_WID9 :: 0xC0000000 /*! < Data width 9 bits > */
SMI_RW_SETUP_MSK :: 0x3F000000 /*! < Setup cycles (6 bits) > */
SMI_RW_SETUP_LS :: 24 /*! < Shift for setup cycles > */
SMI_RW_MODE68 :: 0x00800000 /*! < Run cycle motorola mode > */
SMI_RW_MODE80 :: 0x00000000 /*! < Run cycle intel mode > */
SMI_READ_FSETUP :: 0x00400000 /*! < Read : Setup only for first cycle > */
SMI_WRITE_SWAP :: 0x00400000 /*! < Write : swap pixel data > */
SMI_RW_HOLD_MSK :: 0x003F0000 /*! < Hold cycles (6 bits) > */
SMI_RW_HOLD_LS :: 16 /*! < Shift for hold cycles > */
SMI_RW_PACEALL :: 0x00008000 /*! < Apply pacing always > */
SMI_RW_PACE_MSK :: 0x00007F00 /*! < Pace cycles (7 bits) > */
SMI_RW_PACE_LS :: 8 /*! < Shift for pace cycles > */
SMI_RW_DREQ :: 0x00000080 /*! < Use DMA req on read/write > */
SMI_RW_STROBE_MSK :: 0x0000007F /*! < Strobe cycles (7 bits) > */
SMI_RW_STROBE_LS :: 0 /*! < Shift for strobe cycles > */
SMI_DIRCS_ENABLE :: 0x00000001 /*! < Set to enable SMI. 0 = Read from ext. devices > */
SMI_DIRCS_START :: 0x00000002 /*! < Initiate SMI transfer > */
SMI_DIRCS_DONE :: 0x00000004 /*! < Set if transfer has finished / Write to clear flag > */
SMI_DIRCS_WRITE :: 0x00000008 /*! < 1 = Write to ext. devices > */
SMI_DIRADRS_DEV_MSK :: 0x00000300 /*! < Timing configuration slot > */
SMI_DIRADRS_DEV_LS :: 8 /*! < Shift for configuration slot > */
SMI_DIRADRS_DEV0 :: 0x00000000 /*! < Use timing config slot 0 > */
SMI_DIRADRS_DEV1 :: 0x00000100 /*! < Use timing config slot 1 > */
SMI_DIRADRS_DEV2 :: 0x00000200 /*! < Use timing config slot 2 > */
SMI_DIRADRS_DEV3 :: 0x00000300 /*! < Use timing config slot 3 > */
SMI_DIRADRS_MSK :: 0x0000003F /*! < Adress bits SA5..SA0 > */
SMI_DIRADRS_LS :: 0 /*! < Shift for address bits > */

SMICLK_CNTL :: 44 /* = 0xB0 */
SMICLK_DIV :: 45 /* = 0xB4 */

ST_CS :: 0x0000
ST_CLO :: 0x0004
ST_CHI :: 0x0008


RegisterBase :: enum { 
  REGBASE_ST = 1, REGBASE_GPIO = 2, REGBASE_PWM = 3, REGBASE_CLK = 4, 
  REGBASE_PADS = 5, REGBASE_SPI0 = 6, REGBASE_BSC0 = 7, REGBASE_BSC1 = 8, 
  REGBASE_AUX = 9, REGBASE_SPI1 = 10, REGBASE_SMI = 11,
}

FunctionSelect :: enum { 
  GPIO_FSEL_INPT = 0x00, GPIO_FSEL_OUTP = 0x01, GPIO_FSEL_ALT0 = 0x04, GPIO_FSEL_ALT1 = 0x05, 
  GPIO_FSEL_ALT2 = 0x06, GPIO_FSEL_ALT3 = 0x07, GPIO_FSEL_ALT4 = 0x03, GPIO_FSEL_ALT5 = 0x02, 
  GPIO_FSEL_MASK = 0x07,
}

PUDControl :: enum { GPIO_PUD_OFF = 0x00, GPIO_PUD_DOWN = 0x01, GPIO_PUD_UP = 0x02, }

PadGroup :: enum { PAD_GROUP_GPIO_0_27 = 0, PAD_GROUP_GPIO_28_45 = 1, PAD_GROUP_GPIO_46_53 = 2, }

RPiGPIOPin :: enum { 
  RPI_GPIO_P1_03 = 0, RPI_GPIO_P1_05 = 1, RPI_GPIO_P1_07 = 4, RPI_GPIO_P1_08 = 14, 
  RPI_GPIO_P1_10 = 15, RPI_GPIO_P1_11 = 17, RPI_GPIO_P1_12 = 18, RPI_GPIO_P1_13 = 21, 
  RPI_GPIO_P1_15 = 22, RPI_GPIO_P1_16 = 23, RPI_GPIO_P1_18 = 24, RPI_GPIO_P1_19 = 10, 
  RPI_GPIO_P1_21 = 9, RPI_GPIO_P1_22 = 25, RPI_GPIO_P1_23 = 11, RPI_GPIO_P1_24 = 8, 
  RPI_GPIO_P1_26 = 7, RPI_V2_GPIO_P1_03 = 2, RPI_V2_GPIO_P1_05 = 3, RPI_V2_GPIO_P1_07 = 4, 
  RPI_V2_GPIO_P1_08 = 14, RPI_V2_GPIO_P1_10 = 15, RPI_V2_GPIO_P1_11 = 17, RPI_V2_GPIO_P1_12 = 18, 
  RPI_V2_GPIO_P1_13 = 27, RPI_V2_GPIO_P1_15 = 22, RPI_V2_GPIO_P1_16 = 23, RPI_V2_GPIO_P1_18 = 24, 
  RPI_V2_GPIO_P1_19 = 10, RPI_V2_GPIO_P1_21 = 9, RPI_V2_GPIO_P1_22 = 25, RPI_V2_GPIO_P1_23 = 11, 
  RPI_V2_GPIO_P1_24 = 8, RPI_V2_GPIO_P1_26 = 7, RPI_V2_GPIO_P1_29 = 5, RPI_V2_GPIO_P1_31 = 6, 
  RPI_V2_GPIO_P1_32 = 12, RPI_V2_GPIO_P1_33 = 13, RPI_V2_GPIO_P1_35 = 19, RPI_V2_GPIO_P1_36 = 16, 
  RPI_V2_GPIO_P1_37 = 26, RPI_V2_GPIO_P1_38 = 20, RPI_V2_GPIO_P1_40 = 21, RPI_V2_GPIO_P5_03 = 28, 
  RPI_V2_GPIO_P5_04 = 29, RPI_V2_GPIO_P5_05 = 30, RPI_V2_GPIO_P5_06 = 31, RPI_BPLUS_GPIO_J8_03 = 2, 
  RPI_BPLUS_GPIO_J8_05 = 3, RPI_BPLUS_GPIO_J8_07 = 4, RPI_BPLUS_GPIO_J8_08 = 14, RPI_BPLUS_GPIO_J8_10 = 15, 
  RPI_BPLUS_GPIO_J8_11 = 17, RPI_BPLUS_GPIO_J8_12 = 18, RPI_BPLUS_GPIO_J8_13 = 27, RPI_BPLUS_GPIO_J8_15 = 22, 
  RPI_BPLUS_GPIO_J8_16 = 23, RPI_BPLUS_GPIO_J8_18 = 24, RPI_BPLUS_GPIO_J8_19 = 10, RPI_BPLUS_GPIO_J8_21 = 9, 
  RPI_BPLUS_GPIO_J8_22 = 25, RPI_BPLUS_GPIO_J8_23 = 11, RPI_BPLUS_GPIO_J8_24 = 8, RPI_BPLUS_GPIO_J8_26 = 7, 
  RPI_BPLUS_GPIO_J8_29 = 5, RPI_BPLUS_GPIO_J8_31 = 6, RPI_BPLUS_GPIO_J8_32 = 12, RPI_BPLUS_GPIO_J8_33 = 13, 
  RPI_BPLUS_GPIO_J8_35 = 19, RPI_BPLUS_GPIO_J8_36 = 16, RPI_BPLUS_GPIO_J8_37 = 26, RPI_BPLUS_GPIO_J8_38 = 20, 
  RPI_BPLUS_GPIO_J8_40 = 21, 
}

SPIBitOrder   :: enum u8 { SPI_BIT_ORDER_LSBFIRST = 0, SPI_BIT_ORDER_MSBFIRST = 1, }
SPIMode       :: enum u8 { SPI_MODE0 = 0, SPI_MODE1 = 1, SPI_MODE2 = 2, SPI_MODE3 = 3, }
SPIChipSelect :: enum u8 { SPI_CS0 = 0, SPI_CS1 = 1, SPI_CS2 = 2, SPI_CS_NONE = 3, }

SPIClockDivider :: enum u16 { 
  SPI_CLOCK_DIVIDER_65536 = 0, SPI_CLOCK_DIVIDER_32768 = 32768, SPI_CLOCK_DIVIDER_16384 = 16384, SPI_CLOCK_DIVIDER_8192 = 8192, 
  SPI_CLOCK_DIVIDER_4096 = 4096, SPI_CLOCK_DIVIDER_2048 = 2048, SPI_CLOCK_DIVIDER_1024 = 1024, SPI_CLOCK_DIVIDER_512 = 512, 
  SPI_CLOCK_DIVIDER_256 = 256, SPI_CLOCK_DIVIDER_128 = 128, SPI_CLOCK_DIVIDER_64 = 64, SPI_CLOCK_DIVIDER_32 = 32, 
  SPI_CLOCK_DIVIDER_16 = 16, SPI_CLOCK_DIVIDER_8 = 8, SPI_CLOCK_DIVIDER_4 = 4, SPI_CLOCK_DIVIDER_2 = 2, 
  SPI_CLOCK_DIVIDER_1 = 1,
}

I2CClockDivider :: enum { I2C_CLOCK_DIVIDER_2500 = 2500, I2C_CLOCK_DIVIDER_626 = 626, I2C_CLOCK_DIVIDER_150 = 150, I2C_CLOCK_DIVIDER_148 = 148, }
I2CReasonCodes  :: enum { I2C_REASON_OK = 0x00, I2C_REASON_ERROR_NACK = 0x01, I2C_REASON_ERROR_CLKT = 0x02, I2C_REASON_ERROR_DATA = 0x04, }
